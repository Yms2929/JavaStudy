자바언어의 특징

1. 운영체제에 독립적이다.
자바는 자바가상머신(JVM)을 통해서 통신하고 운영체제나 하드웨어에 종속적이지 않다.

2. 객체지향언어이다.
상속, 캡슐화, 다형성이 잘 적용된 순수한 객체지향언어이다.

3. 자동 메모리 관리(가비지컬렉터)
자동으로 가비지컬렉터가 메모리를 관리해주기 때문에 프로그래머는 메모리를 체크하고
반환하는 일을 수동으로 할 필요가 없다.

4. 네트워크와 분산처리를 지원한다.
네트워크 프로그래밍 라이브러리(Java API)를 통해 짧은 시간에 네트워크 관련 프로그램 개발 가능하다.

5. 멀티쓰레드를 지원한다.
일반적으로 멀티쓰레드의 지원은 사용되는 운영체제에 따라 구현방법도 상이하며, 처리 방식도 다르다.
그러나 자바에서는 시스템과는 관계없이 구현가능하며, 라이브러리(Java API)가 제공되므로 구현이 쉽다.
여러 쓰레드에 대한 스케줄링을 자바 인터프리터가 담당하게 된다.

6. 동적 로딩을 지원한다.
자바로 작성된 애플리케이션은 여러 개의 클래스로 구성되어 있다.
실행 시에 모든 클래스가 로딩되지 않고 필요한 시점에 클래스를 로딩하여 사용한다.
일부 클래스가 변경되어도 전체 애플리케이션을 다시 컴파일하지 않아도 된다.
애플리케이션의 변경사항이 발생해도 적은 작업만으로도 처리할 수 있고 유연하다.

7. 속도가 느리다.
일반 애플리케이션의 코드는 OS만 거치고 하드웨어로 전달되는데 자바 애플리케이션은 JVM을
한 번 더 거치기 때문에, 그리고 하드웨어에 맞게 완전히 컴파일된 상태가 아니고 실행 시에
해석 되기 때문에 속도가 느리다는 단점이 있다. 그러나 요즘엔 바이트코드(컴파일된 자바코드)를
하드웨어의 기계어로 바로 변환해주는 JIT컴파일러와 향상된 최적화 기술이 적용되어서 속도를 많이 줄였다.
일반 애플리케이션은 OS를 변경해야 하지만 자바 애플리케이션은 JVM을 변경해야 한다.

지역변수는 사용되기 전에 초기화를 반드시 해야 하지만 클래스변수와 인스턴스변수는 초기화를 생략 가능
상수는 변수와 달리 한번 값을 저장하면 다른 값으로 변경할 수 없다.
final int MAX_SPEED = 10; 상수는 반드시 선언과 동시에 초기화 해야 한다. 상수의 이름은 모두 대문자

2의 보수법
어떤 수의 n의 보수는 더했을 때 n이 되는 수
2의 보수 관계에 있는 두 2진수를 더하면 자리올림이 발생하고 0이 된다

문자열을 비교할 때는 항상 equlas()를 사용하자
대소문자를 구별하지 않고 비교하고 싶으면 equalsIgnoreCase()를 사용하자